#include <Windows.h>
#include <iostream>
#include <string>
#include <filesystem>
#include <fstream>
#include <iomanip>
#include "scanner.hpp"
#include "FileName.h"
#pragma comment(lib, "Crypt32.lib")
void dumpSampleInfoToTxt(vector<MalwareFamilyData>& samples, string& outputFile) {
    std::ofstream out(outputFile);

    if (!out.is_open()) {
        cerr << "Error opening output file: " << outputFile << endl;
        return;
    }

    // Print header
    out << std::left << std::setw(20) << "FILE NAME" << std::setw(20) << "MALWARE FAMILY"
        << std::setw(20) << "IMPORTS" << std::setw(20) << "DOSHEADERS" << std::setw(20) << "NumImports"
        << std::setw(20) << "NumDlls" << std::setw(20) << "SizeImage"
        << std::setw(40) << "MD5_HASH" << std::setw(40) << "SHA256_HASH" << "\n";

    // Print sample information
    for (const auto& sample : samples) {
        out << std::left << std::setw(20) << sample.fileName << std::setw(20) << sample.malwareType
            << std::setw(20) << "" << std::setw(20) << "" << std::setw(20) << sample.numOfImports
            << std::setw(20) << sample.numofExportsDlls << std::setw(20) << sample.sizeOfImage
            << std::setw(40) << sample.MD5_HASH << std::setw(40) << sample.SHA256_HASH << "\n";

        for (const auto & import : sample.malware_imports) {
            out << std::setw(20) << "" << std::setw(20) << "" << std::setw(20) << import << std::setw(20) << "" << std::setw(20) << "" << std::setw(40) << "" << std::setw(40) << "" << "\n";
        }
    }

    out.close();
}

int main(int argc, char* argv[]) 
{

    string filePath = argv[1];
    string malwareFamily;
    // vector of samples:
    vector<MalwareFamilyData> samples;
    printf("> which malware family: \n");
    cin >> malwareFamily;

    system("cls");
    system("color 2");

    printf("> folder loaded: %s\n", filePath.c_str());
    printf("> reading files\n");

    std::vector<std::string> drivers = GetFilesInDirectory(argv[1], ".exe");
    for (string malwareSample : drivers) 
    {
        fs::path driverPath = fs::path(malwareSample);
        MalwareFamilyData analyzer(driverPath.filename().string(), malwareSample, malwareFamily);
        analyzer.calculateSHA256();
        printf("> sha 256 dumped\n");
        analyzer.calculateMD5Hash();
        printf("> calculateMD5Hash dumped\n");
        analyzer.dumpImports();
        printf("> imports dumped\n");
        printf("> numimports, numdlls, sizeofimage dumped\n");
        printf("\n\n");

        samples.push_back(analyzer);
        
    }
    string output = "output.txt";
    dumpSampleInfoToTxt(samples, output);
    // system("cls");
    printf("> analysis done! :)\n");

    system("pause");
    return 0;
}
